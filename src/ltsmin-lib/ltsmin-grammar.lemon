%include {
#include <hre/config.h>
#include <stdlib.h>

#include <hre/user.h>
#include <util-lib/chunk_support.h>
#include <ltsmin-lib/etf-util.h>
#include <ltsmin-lib/etf-internal.h>
#include <ltsmin-lib/ltsmin-parse-env.h>
/* solves the issue where lemon parses this file
 with -Werror and -DNDEBUG */
#ifdef NDEBUG
#undef NDEBUG
#endif
#include <assert.h>
}

/* Section common parser configuration.

This section is shared by the parsers for all LTSmin languages.
*/

%token_prefix TOKEN_
%token_type { int } 
%syntax_error {
    (void)yymajor;(void)yyminor;
    if (env->lineno == 0) {
        HREmessage(error,"syntax error near pos %d",env->linepos+1);
    } else {
        HREmessage(error,"syntax error near line %d, pos %d",env->lineno+1,env->linepos+1);
    }
}
%parse_failure { HREabort(0); }
%parse_accept { Print1(infoLong,"success!"); }
%extra_argument { ltsmin_parse_env_t env }
%stack_overflow {
    (void)yypMinor;
    Abort("stack overflow");
}

/* Section ETF grammar

This section contains the grammar definition of ETF.
*/

input ::= ETF etf_spec . {
    Warning(infoLong,"parsing finished");
    etf_model_t model=env->etf;
    lts_type_set_state_label_count(model->ltstype,model->map_count);
    for(int i=0;i<model->map_count;i++){
        lts_type_set_state_label_name(model->ltstype,i,model->map_names[i]);
        lts_type_set_state_label_type(model->ltstype,i,model->map_types[i]);
    }
    Warning(debug,"ETF model has %d transition sections",model->trans_count);
    Warning(debug,"ETF model has %d map sections",model->map_count);
    Warning(debug,"ETF model has %d types",lts_type_get_type_count(model->ltstype));
}
input ::= ERROR . {
    Abort("The error token is meant to give the lexer a way of passing the error.");
}

etf_spec ::= state_section edge_section .
etf_spec ::= etf_spec init_section .
etf_spec ::= etf_spec trans_section.
etf_spec ::= etf_spec map_section.
etf_spec ::= etf_spec sort_section.

etf_spec ::= error . {
    HREprintf (error, "ETF syntax error.  For a description of the ETF syntax, "
                      "refer to the etf(5) man page.\n");
    HREabort(0);
}

state_section ::= BEGIN STATE decl_list(L) END STATE. {
    int N=ETFlistLength(L);
    if (N==0) {
        Abort("state vector length must be at least 1");
    }
    Warning(infoLong,"The state length is %d",N);
    lts_type_set_state_length(env->etf->ltstype,N);
    etf_list_t list=L;
    for(int i=N-1;i>=0;i--){
        if (list->fst!=SI_INDEX_FAILED) {
            char *name=SIget(env->idents,list->fst);
            lts_type_set_state_name(env->etf->ltstype,i,name);
        }
        if (list->snd!=SI_INDEX_FAILED) {
            char*sort=SIget(env->idents,list->snd);
            int typeno=ETFgetType(env->etf,sort);
            lts_type_set_state_typeno(env->etf->ltstype,i,typeno);
        }
        list=list->prev;
    }
    ETFlistFree(L);
    Warning(infoLong,"done");
}

edge_section ::= BEGIN EDGE decl_list(L) END EDGE.
{
    int N=ETFlistLength(L);
    Warning(infoLong,"There are %d edge labels",N);
    lts_type_set_edge_label_count(env->etf->ltstype,N);
    etf_list_t list=L;
    for(int i=N-1;i>=0;i--){
        char *name=SIget(env->idents,list->fst);
        lts_type_set_edge_label_name(env->etf->ltstype,i,name);
        char*sort=SIget(env->idents,list->snd);
        int typeno=ETFgetType(env->etf,sort);
        lts_type_set_edge_label_typeno(env->etf->ltstype,i,typeno);
        list=list->prev;
    }
    ETFlistFree(L);
    Warning(infoLong,"done");
}

init_section ::= BEGIN INIT valref_list(L) END INIT.
{
    int N=ETFlistLength(L);
    if (N!=lts_type_get_state_length(env->etf->ltstype)){
        Abort("incorrect length of initial state: %d instead of %d.",
            N,lts_type_get_state_length(env->etf->ltstype));
    }
    if (env->etf->initial_state) Abort("more than one init section");
    env->etf->initial_state=(int*)RTmalloc(N*sizeof(int));
    etf_list_t list=L;
    for(int i=N-1;i>=0;i--){
        switch(list->fst){
            case REFERENCE_VALUE:
                env->etf->initial_state[i]=list->snd;
                break;
            case INLINE_VALUE: {
                char *val=SIget(env->idents,list->snd);
                int typeno=lts_type_get_state_typeno(env->etf->ltstype,i);
                env->etf->initial_state[i]=SIput(env->etf->type_values[typeno],val);
                break;
            }
            default:
                Abort("unknown discriminator %d",list->fst);
        }
	list=list->prev;
    }
    ETFlistFree(L);
    Warning(infoLong,"initial state found");
}

%type valref_list { etf_list_t }
%destructor valref_list { ETFlistFree($$); }

valref_list(L) ::= . {L=NULL;}
valref_list(L) ::= valref_list(P) NUMBER(N) . { L=ETFlistAppend(P,REFERENCE_VALUE,N); }
valref_list(L) ::= valref_list(P) STRING(S) . { L=ETFlistAppend(P,INLINE_VALUE,S); }


%type decl_list { etf_list_t }
%destructor decl_list { ETFlistFree($$); }
decl_list(L) ::= . { L=NULL; }
decl_list(L) ::= decl_list(P) IDENT(N) COLON IDENT(T) . { L=ETFlistAppend(P,N,T); }

%type sort_list { string_index_t }

sort_section ::= BEGIN SORT sort_list(IDX) END SORT. {
    Warning(infoLong,"read %d values",SIgetCount(IDX));
}

sort_list(IDX) ::= IDENT(ID) . {
    char *name=SIget(env->idents,ID);
    Warning(infoLong,"reading values for sort %s",name);
    int typeno=ETFgetType(env->etf,name);
    IDX=env->etf->type_values[typeno];
    if (SIgetCount(IDX)!=0) {
        Abort("sort %s not empty",name);
    }
}
sort_list(IDX) ::= sort_list(IDX1) VALUE(S) . {
    IDX=IDX1;
    chunk c;
    c.data=SIgetC(env->values,S,(int*)&c.len);
    int idx=SIgetCount(IDX);
    if (idx!=SIputC(IDX,c.data,c.len)) {
	Abort("non-sequential index");
    }
}

%type trans_list { etf_rel_t }

trans_section ::= BEGIN TRANS trans_list(R) end TRANS. {
    if (ETFrelCount(R)){
        ensure_access(env->etf->trans_manager,env->etf->trans_count);
        env->etf->trans[env->etf->trans_count]=R;
        env->etf->trans_count++;
    } else {
        Warning(infoLong,"skipping empty trans section");
    }
}

end ::= END . { env->linebased=0; }

%type map_list { etf_map_t }

map_section ::= BEGIN MAP map_list(M) end MAP. {
    env->etf->map[env->etf->map_count]=M;
    char*name=env->etf->map_names[env->etf->map_count];
    char*sort=env->etf->map_types[env->etf->map_count];
    //int typeno=ETFgetType(env->etf,sort);
    Warning(infoLong,"added map %d (%s:%s) with %d entries",
            env->etf->map_count,name,sort,ETFmapCount(M));
    env->etf->map_count++;
    env->etf_current_idx=NULL;
    env->linebased=0;
}

map_list(M) ::= IDENT(N) COLON IDENT(S) . {
    char *name=SIget(env->idents,N);
    char *sort=SIget(env->idents,S);
    int typeno=ETFgetType(env->etf,sort);
    ensure_access(env->etf->map_manager,env->etf->map_count);
    env->etf->map_names[env->etf->map_count]=strdup(name);
    env->etf->map_types[env->etf->map_count]=strdup(sort);
    M=ETFmapCreate(lts_type_get_state_length(env->etf->ltstype));
    env->etf_current_idx=env->etf->type_values[typeno];
    env->linebased=1;
}

map_list(M) ::= map_list(M1) END_OF_LINE . { M=M1; } // skip empty lines.

map_list(M) ::= map_list(M1) map_entry(L) value(V) END_OF_LINE . {
    int N=ETFlistLength(L);
    if(N!=lts_type_get_state_length(env->etf->ltstype)) {
        Abort("bad state length in map entry");
    }
    int state[N];
    etf_list_t list=L;
    for(int i=N-1;i>=0;i--){
        state[i]=list->fst;
        list=list->prev;
    }
    ETFlistFree(L);
    ETFmapAdd(M1,state,V);
    M=M1;
}

%type map_entry { etf_list_t }
%destructor map_entry { ETFlistFree($$); }

map_entry(L) ::= . { L=NULL; }
map_entry(L) ::= map_entry(P) NUMBER(N). {L=ETFlistAppend(P,N+1,0); }
map_entry(L) ::= map_entry(P) STAR. {L=ETFlistAppend(P,0,0);}

%type value { int }

value(V) ::= NUMBER(N) . { V=N; }
value(V) ::= VALUE(S) . {
    chunk c;
    c.data=SIgetC(env->values,S,(int*)&c.len);
    V=SIputC(env->etf_current_idx,c.data,c.len);
}
trans_list(R) ::= . {
    R=ETFrelCreate(lts_type_get_state_length(env->etf->ltstype),
                   lts_type_get_edge_label_count(env->etf->ltstype));
    env->linebased=1;
}
trans_list(R) ::= trans_list(R1) step_list(L)  END_OF_LINE  . {
    R=R1;
    int len=ETFlistLength(L);
    if(len){
        int N=lts_type_get_state_length(env->etf->ltstype);
        int K=lts_type_get_edge_label_count(env->etf->ltstype);
        if(len!=N+K){
            Abort("bad length in trans entry: %d",len);
        }
        int src[N];
        int dst[N];
        int lbl[K];
        etf_list_t list=L;
        for(int i=K-1;i>=0;i--){
            switch(list->fst){
                case REFERENCE_VALUE:
                    lbl[i]=list->snd;
                    break;
                case INLINE_VALUE: {
                    chunk c;
                    c.data=SIgetC(env->values,list->snd,(int*)&c.len);
                    int typeno=lts_type_get_edge_label_typeno(env->etf->ltstype,i);
                    lbl[i]=SIputC(env->etf->type_values[typeno],c.data ,c.len);
                    break;
                }
                default:
                    Abort("unknown discriminator %d",list->fst);
            }
            list=list->prev;
        }
        for(int i=N-1;i>=0;i--){
            src[i]=list->fst;
            dst[i]=list->snd;
            list=list->prev;
        }
        ETFlistFree(L);
        ETFrelAdd(R,src,dst,lbl);
    }
}

%type step_list { etf_list_t }
%destructor step_list { ETFlistFree($$); }

step_list(L) ::= . {L=NULL;}
step_list(L) ::= step_list(P) STAR . { L=ETFlistAppend(P,0,0); }
step_list(L) ::= step_list(P) NUMBER(S) SLASH NUMBER(D) . {L=ETFlistAppend(P,S+1,D+1);}
step_list(L) ::= step_list(P) NUMBER(N) . { L=ETFlistAppend(P,REFERENCE_VALUE,N); }
step_list(L) ::= step_list(P) VALUE(S) . { L=ETFlistAppend(P,INLINE_VALUE,S); }

/* Section Expressions

This section contains the grammar for mu-calculus expressions.
It should be split into a section for mu-calculus and a library
of state expressions, edge expression, data expressions, etc.
that can be reused for other languages (e.g. CTL, CTL* and LTL)
*/

%type expr { ltsmin_expr_t }
%destructor expr {
    (void)env;
     LTSminExprDestroy($$, 1);
}

input ::= EXPR expr(E) . {
    (void)E;
    env->expr=E;
}

%left CONSTANT .
%right QUANTIFIER .
%left BIN11 .
%left BIN10 .
%left BIN9 .
%left PREFIX9  .
%right POSTFIX9 .
%left BIN8 .
%left PREFIX8  .
%right POSTFIX8 .
%left BIN7 .
%left PREFIX7  .
%right POSTFIX7 .
%left BIN6 .
%left PREFIX6  .
%right POSTFIX6 .
%left BIN5 .
%left PREFIX5  .
%right POSTFIX5 .
%left BIN4 .
%left PREFIX4  .
%right POSTFIX4 .
%left BIN3 .
%left PREFIX3 .
%right POSTFIX3 .
%left BIN2 .
%left PREFIX2 .
%right POSTFIX2 .
%left BIN1 .
%left PREFIX1 .
%right POSTFIX1.

expr(E) ::= LPAR expr(EE) RPAR . { E=EE; }
expr(E) ::= STATE_VAR(ID) . {
    E = LTSminExpr(SVAR, SVAR, ID, NULL, NULL);
}
expr(E) ::= IDENT(ID) . {
    E = LTSminExpr(VAR, VAR, ID, NULL, NULL);
}
expr(E) ::= EDGE_VAR(ID) . {
    E = LTSminExpr(EVAR, EVAR, ID, NULL, NULL);
}
expr(E) ::= VALUE(ID) . {
    E = LTSminExpr(CHUNK, CHUNK, ID, NULL, NULL);
}
expr(E) ::= NUMBER(N) . {
    E = LTSminExpr(INT, INT, N, NULL, NULL);
}
expr(E) ::= CONSTANT(OP) . {
    E = LTSminExpr(CONSTANT, LTSminConstantToken(env, OP), OP, NULL, NULL);
}

expr(E) ::= expr(E1) BIN1(OP) expr(E2) . {
    E = LTSminExpr(BINARY_OP, LTSminBinaryToken(env, OP), OP, E1, E2);
}
expr(E) ::= expr(E1) BIN2(OP) expr(E2) . {
    E = LTSminExpr(BINARY_OP, LTSminBinaryToken(env, OP), OP, E1, E2);
}
expr(E) ::= expr(E1) BIN3(OP) expr(E2) . {
    E = LTSminExpr(BINARY_OP, LTSminBinaryToken(env, OP), OP, E1, E2);
}
expr(E) ::= expr(E1) BIN4(OP) expr(E2) . {
    E = LTSminExpr(BINARY_OP, LTSminBinaryToken(env, OP), OP, E1, E2);
}
expr(E) ::= expr(E1) BIN5(OP) expr(E2) . {
    E = LTSminExpr(BINARY_OP, LTSminBinaryToken(env, OP), OP, E1, E2);
}
expr(E) ::= expr(E1) BIN6(OP) expr(E2) . {
    E = LTSminExpr(BINARY_OP, LTSminBinaryToken(env, OP), OP, E1, E2);
}
expr(E) ::= expr(E1) BIN7(OP) expr(E2) . {
    E = LTSminExpr(BINARY_OP, LTSminBinaryToken(env, OP), OP, E1, E2);
}
expr(E) ::= expr(E1) BIN8(OP) expr(E2) . {
    E = LTSminExpr(BINARY_OP, LTSminBinaryToken(env, OP), OP, E1, E2);
}
expr(E) ::= expr(E1) BIN9(OP) expr(E2) . {
    E = LTSminExpr(BINARY_OP, LTSminBinaryToken(env, OP), OP, E1, E2);
}
expr(E) ::= expr(E1) BIN10(OP) expr(E2) . {
    E = LTSminExpr(BINARY_OP, LTSminBinaryToken(env, OP), OP, E1, E2);
}
expr(E) ::= expr(E1) BIN11(OP) expr(E2) . {
    E = LTSminExpr(BINARY_OP, LTSminBinaryToken(env, OP), OP, E1, E2);
}

expr(E) ::= PREFIX1(OP) expr(E1) . {
    E = LTSminExpr(UNARY_OP, LTSminUnaryToken(env, OP), OP, E1, NULL);
}

expr(E) ::= PREFIX2(OP) expr(E1) . {
    E = LTSminExpr(UNARY_OP, LTSminUnaryToken(env, OP), OP, E1, NULL);
}

expr(E) ::= PREFIX3(OP) expr(E1) . {
    E = LTSminExpr(UNARY_OP, LTSminUnaryToken(env, OP), OP, E1, NULL);
}

expr(E) ::= PREFIX4(OP) expr(E1) . {
    E = LTSminExpr(UNARY_OP, LTSminUnaryToken(env, OP), OP, E1, NULL);
}

expr(E) ::= PREFIX5(OP) expr(E1) . {
    E = LTSminExpr(UNARY_OP, LTSminUnaryToken(env, OP), OP, E1, NULL);
}

expr(E) ::= PREFIX6(OP) expr(E1) . {
    E = LTSminExpr(UNARY_OP, LTSminUnaryToken(env, OP), OP, E1, NULL);
}

expr(E) ::= PREFIX7(OP) expr(E1) . {
    E = LTSminExpr(UNARY_OP, LTSminUnaryToken(env, OP), OP, E1, NULL);
}
expr(E) ::= PREFIX8(OP) expr(E1) . {
    E = LTSminExpr(UNARY_OP, LTSminUnaryToken(env, OP), OP, E1, NULL);
}
expr(E) ::= PREFIX9(OP) expr(E1) . {
    E = LTSminExpr(UNARY_OP, LTSminUnaryToken(env, OP), OP, E1, NULL);
}

expr(E) ::= expr(E1) POSTFIX1(OP) . {
    E = LTSminExpr(UNARY_OP, LTSminUnaryToken(env, OP), OP, E1, NULL);
}

expr(E) ::= expr(E1) POSTFIX2(OP) . {
    E = LTSminExpr(UNARY_OP, LTSminUnaryToken(env, OP), OP, E1, NULL);
}

expr(E) ::= expr(E1) POSTFIX3(OP) . {
    E = LTSminExpr(UNARY_OP, LTSminUnaryToken(env, OP), OP, E1, NULL);
}

expr(E) ::= expr(E1) POSTFIX4(OP) . {
    E = LTSminExpr(UNARY_OP, LTSminUnaryToken(env, OP), OP, E1, NULL);
}
expr(E) ::= expr(E1) POSTFIX5(OP) . {
    E = LTSminExpr(UNARY_OP, LTSminUnaryToken(env, OP), OP, E1, NULL);
}
expr(E) ::= expr(E1) POSTFIX6(OP) . {
    E = LTSminExpr(UNARY_OP, LTSminUnaryToken(env, OP), OP, E1, NULL);
}
expr(E) ::= expr(E1) POSTFIX7(OP) . {
    E = LTSminExpr(UNARY_OP, LTSminUnaryToken(env, OP), OP, E1, NULL);
}
expr(E) ::= expr(E1) POSTFIX8(OP) . {
    E = LTSminExpr(UNARY_OP, LTSminUnaryToken(env, OP), OP, E1, NULL);
}
expr(E) ::= expr(E1) POSTFIX9(OP) . {
    E = LTSminExpr(UNARY_OP, LTSminUnaryToken(env, OP), OP, E1, NULL);
}

expr(E) ::= MU_SYM(OP) IDENT(ID) DOT expr(E1) . [QUANTIFIER] {
    E = LTSminExpr(MU_FIX, OP, ID, E1, NULL);
}

expr(E) ::= NU_SYM(OP) IDENT(ID) DOT expr(E1) . [QUANTIFIER] {
    E = LTSminExpr(NU_FIX, OP, ID, E1, NULL);
}

expr(E) ::= EXISTS_SYM(OP) expr(E1) DOT expr(E2) . [QUANTIFIER]  {
    E = LTSminExpr(EXISTS_STEP, OP, 0, E1, E2);
}

expr(E) ::= ALL_SYM(OP) expr(E1) DOT expr(E2) . [QUANTIFIER] {
    E = LTSminExpr(FORALL_STEP, OP, 0, E1, E2);
}

expr(E) ::= IF IDENT THEN expr(EE) . [QUANTIFIER] {
    E = EE ;
}

expr(E) ::= EDGE_EXIST_LEFT EDGE_VAR(ID) EDGE_EXIST_RIGHT expr(E1) . [QUANTIFIER] {
    E = LTSminExpr(EDGE_EXIST, EDGE_EXIST, ID, E1, NULL);
}

expr(E) ::= EDGE_ALL_LEFT EDGE_VAR(ID) EDGE_ALL_RIGHT expr(E1) . [QUANTIFIER] {
    E = LTSminExpr(EDGE_ALL, EDGE_ALL, ID, E1, NULL);
}

/* generates a special USER token so that the user knows the value of the last reserved token */
/* must be at the end of the file */
%left USER
