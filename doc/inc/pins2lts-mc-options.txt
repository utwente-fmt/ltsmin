*--strategy*='TYPE'::
        Select an exploration strategy. Two kinds of algorithms
        are available: LTL model checking and reachability.
        The multi-core LTL algorithms (Nested DFS) are implemented
        in a swarmed fashion, however with a shared state storage.
        On top of that, MCNDFS and ENDFS offer work sharing between threads
        and can deliver speedups for some models.  
        Note that the LTL algorithms require buchi automata as input.
        Such a model can be provided directly by the language frontend,
        i.e., DiVinE property models are supported, or by the LTL
        layer (see --ltl).
        Note finally that strict reachability exploration orders
        are not guaranteed by all multi-core search strategies.
        'TYPE' can be one of the following options:

bfs;;
  explore state space in breadth-first order (default).

sbfs;;
  explore state space in strict breadth-first order (default).

dfs;;
  explore state space in relaxed depth-first order. Relaxed meaning that
  the inclusion check on the set of visited states is executed immediately
  after generating a state. This saves stack space and improves performance
  of the parallel reachability analysis.

ndfs;;
  multi-core swarmed Nested Depth-First Search (Courcoubetis et al.).

nndfs;;
  multi-core swarmed New Nested Depth-First Search (Schwoon, Esparza).

ldfs;;
  Multi-Core Nested Depth-First Search (Laarman, Langerak, van de Pol, Weber, Wijs).

endfs;;
  Multi-Core Nested Depth-First Search by Evangelista et al. The algorithm has
  been adapted with the cyan color encoding and early cycle detection, as
  described in "Variations on Multi-Core Nested Depth-First Search"
  (Laarman, van de Pol).
  Note that ENDFS requires a repair procedure, NNDFS is chosen by default.
  Alternatives can be chosen by  providing a list of strategies, for example: 
  "endfs,mcndfs", yields the NMC-NDFS algorithm as described in the Variations
  paper (with load balancing).
  Finally, we also allow multiple levels of ENDFS to be combined:
  "endfs,endfs,nndfs". 

cndfs;;
  New CNDFS algorithm.
  Multi-Core Nested Depth-First Search (Evangelista, Laarman, Petrucci, van de Pol).

tarjan;;
  Tarjan's sequential SCC algorithm.
  Depth-First Search and Linear Graph Algorithms (Tarjan).

renault;;
  Renault's SCC algorithm.
  Parallel Explicit Model Checking for Generalized BÃ¼chi Automata (Renault et al.).

ufscc;;
  The UFSCC SCC algorithm.
  Multi-Core On-The-Fly SCC Decomposition (Bloemen, Laarman, van de Pol).

dfsfifo;;
  DFS-FIFO detect non-progress cycles if the front-end provides a progress
  state or transitions label.
  Additionally, it verifies weak LTL properties with superior scalability
  to the *NDFS algorithms. LTSmin automatically identifies weak LTL
  formulae when provided with a property (via the --ltl option).

*--perm*='TYPE'::
        Select the transition permutation, which is used to guide
        different threads to different parts of the state space.
        A good permutation can significantly speed up bug hunting.
        'TYPE' can be one of the following options, each has
        different properties in terms of performance and effectiveness
        summarized as (perf./eff.) :

dynamic;;
    use "fresh successor heuristics" described in
    "Variations on Multi-Core Nested Depth-First Search" (Laarman, van de Pol).
    (decent/very good for bug hunting). Default for LTL.

sort;;
    sort on the unique id of the successor state (decent/good)

random;;
    use multiple fixed random permutation schemes per worker (decent/good).

rr;;
	randomized using a full random sort order on the states. This is more random
	than the previous option, but requires more pre-computation time for the
	random array (decent/almost perfect).

shift;;
   shift the order of transitions by a fixed value per worker (fast/decent).

otf;;
    sort according to a dynamic permutation scheme (slow/perfect).

none;;
    use the same exploration order for all workers. Default for reachability.


*--state*='TYPE'::
        Select type of data structure for storing visited states.
        'TYPE' can be one of the following options:

table;;
  use a lockless hash table.

tree;;
  use a lockless tree-compressed table. In many cases the tree
  can compress states to two integers regardless of their length. To efficiently
  accommodate more than 4*10^9 states, the table is split in a root and a leaf
  table whose respective size can be adjusted using the --ratio option
  (default). 

cleary-tree;;
  use a lockless tree-compressed hash table with a parallel Cleary table to
  store roots. The compressed size of a state can approach one integer 
  with this approach. The leafs table is stored as a standard tree table (two
  integers per subtree), which typically can be much smaller (up to the
  square root of the root table size). To control the respective size of the
  leaf table use the --ratio option.


*--ratio*='NUMBER'::
        Log_2 ratio between root and leaf table in tree compression. The ratio
        can theoretically be as low as the square root of the root table size
        (see --size). This will however only work if the state vectors are
        perfectly combinatorial wrt their variable values. In most cases
        the leaf table will grow larger, but find found that a factor four
        (--ratio=2) works well for over 75% of the BEEM models.
        (default: NUMBER=2). 


*--size*='NUMBER'::
        Log_2 hash table size in elements (default: NUMBER=24).
        This is also used for the internal node table of the tree.


*--zobrist*='NUMBER'::
        Save time by using zobrist incremental state hashing.
        NUMBER defines the (log_2) size of the random number table
        (default: 0=OFF). Large tables mean better hash distributions,
        but more cache misses due to memory size.
        Experiments have shown that small tables (2^6) suffice for
        good distributions (equal or better than Jenkin's hash).
        Improvements are only noticable for fast state generators, like
        DiVinE 2.2 (manpage:dve22lts-mc[1]).


*--max*='NUMBER'::
        Maximum search depth.


*--progress-states*::
    Forcess DFS-FIFO to use progress state labels, even if progress transition
    labels are present.


*--strict*::
    Forces DFS-FIFO to use strict BFS ordering for finding shorter lassos.
    

*--proviso*='PROVISO'::
    Change the proviso implementation for partial order reduction in presence
    of safety properties or liveness properties. Parallel LTL is only supported
    with the cndfs proviso in the cndfs search strategy. Sequentially, LTL is
    also supported with the stack proviso in the ndfs search strategy.
    PROVISO can be either:

force-none;;
    Disables the ignoring proviso check (only useful for benchmarking or
    bug hunting).

closed-set;;
    The closed set proviso is the default proviso which requires
    almost no extra work/memory. It might however result in less
    reduction than the 'stack' proviso. It works with both
    the dfs and (p/s)bfs exploration strategies.

stack;;
    The stack proviso is the proviso used for example by the spin
    model checker. It requires some extra work/memory but may
    result in a better reduction than 'closedset'. It works only
    for a dfs or ndfs search strategy (for resp. safety or LTL properties).

cndfs;;
    A special parallel cycle proviso is used to enable POR with multi-core
    LTL model checking using the cndfs search strategy.

