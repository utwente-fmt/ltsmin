*--order*='ORDER'::
        Select the exploration strategy: 'bfs-prev', 'bfs', 'chain-prev',
        or 'chain'. With 'bfs-prev' and 'bfs', breadth-first search is
        used. Here, 'bfs-prev' only considers the states found at the
        previous level, while 'bfs' considers the whole visited set. With
        'chain-prev' and 'chain', a chaining strategy is used. Here,
        'chain-prev' at each level starts from the states found at the
        previous level, while 'chain' uses the whole visited set. Defaults
        to 'bfs-prev'.
+
When using breadth-first search, the tool performs the next state computation
for all edge groups on the current level or current set of visited states.
Chaining means to apply next state for the first group to the visited
states, then apply next-state for the second group to the result,
etc.  Thus, a chaining analysis can be completed in much less
iterations than a BFS analysis.

*--saturation*='SATURATION'::
        Select a saturation strategy: 'none', 'sat-like', 'sat-loop', 'sat-fix',
        'sat'. The 'sat-like' strategy goes up and down the levels of the BDD
        used to represent the state space. The 'sat-loop' strategy loops over
        the levels. The 'sat-fix' strategy repeatedly performs a fixpoint
        computation using saturation. The 'sat' strategy does saturation as
        described in the literature with on-the-fly expansion of the transition
        relations. Defaults to 'none', i.e. no saturation.
+
All strategies except 'sat-fix' and 'sat' work in combination with the 'order'
to saturate levels.

*--sat-granularity*='GRANULARITY'::
        Select the granularity of 'sat-like' and 'sat-loop' strategies. The
        granularity indicates how many BDD levels are considered at the same
        time. Defaults to 10.

*--save-sat-levels*::
        Save the previous states seen at saturation levels. This option has
        effect for any of the saturation strategies in combination with either
        'bfs-prev' or 'chain-prev'.

*--guidance*='STRATEGY'::
        Select a search strategy for searching for actions: 'unguided',
        'directed'. The 'unguided' strategy considers all transition
        groups. The 'directed' strategy focuses the search on the transition
        groups in which the action occurs. Defaults to 'unguided'.

*--dot*='DIR'::
    If this option is supplied 'DIR' is a directory to which dot files of vector sets are written to.
    Note that this option should only be used for smaller vector sets because of disk space.
+
Three type of dot files are (over)written:

 . current-l<L>.dot: the nodes in the vector set at level L (and only level L),
 . visited-l<L>.dot: the nodes in the vector set up to and included level L,
 . group_next-l<L>-k<K>.dot: the nodes in the transition relation of group K at level L.

*--mu*='MUFILE|MUFORMULA'::
    After computing all reachable states, evaluate the mu-formula in 'MUFILE'
+
'MUFILE' is a file containing a Mu Calculus formula (see
manpage:ltsmin-mu[5]). Alternatively, the formula can be provide directly as
MUFORMULA. This formula is a propositional formula with least and greatest
fixpoint operator. It will be evaluated after generation of the complete state
space.

*--ctl-star*='CTLFILE|CTLFORMULA'::
    'CTLFILE' is a file containing an Linear Temporal Logic Star (CTL*) formula
    (see manpage:ltsmin-ctl[5]).  Which content can also be provided directly as
    'CTLFORMULA'.
    The formula is translated to a mu-formula (see manpage:ltsmin-mu[5]),
    which is evaluated after computing all reachable states.
    
*--no-matrix*::
        Do not print the dependency matrix if -v (verbose) is used.

*--no-soundness-check*::
        When using '--pins-guards=assume-true' disable the soundness check of the model specification.
        The soundness check may be expensive and can be disabled when the model specification is known to be sound.
        A guard may not evaluate to true or false but to maybe. A guard which evaluates to maybe depends on
        the evaluation of another guard. For languages such as Promela and DVE it checks whether if 
        a guard evaluates to maybe there is another guard on the left which evaluates to false. For languages such as
        mCRL2 it also checks whether a guard on the right evaluates to false. If for all states this holds then the
        model specification is sound for guard-splitting.
        
*--precise*::
        Compute the final number of states precisely.
        
*--next-union*::
        If supported by the vset implementation; perform the computation of successor states simultaneously with unifying
        the current states. Simultaneously, means with a single BDD/MDD operation.

*--inv-par*::
        Checks all invariants in parallel.
        
*--inv-bin-par*::
        Checks both sides of a binary operand in parallel in an invariant, requires *--inv-par*.
        Note that this option may actually slow down invariant checking, because parallelization
        of a binary operand disables short-circuit evaluation. 